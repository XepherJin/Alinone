package com.retropoktan.alinone.alinoneDao;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TODAY_ORDER.
*/
public class TodayOrderDao extends AbstractDao<TodayOrder, String> {

    public static final String TABLENAME = "TODAY_ORDER";

    /**
     * Properties of entity TodayOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "orderId", true, "ORDER_ID");
        public final static Property Platform = new Property(1, Integer.class, "platform", false, "PLATFORM");
        public final static Property IsPaid = new Property(2, Boolean.class, "isPaid", false, "IS_PAID");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Price = new Property(4, Float.class, "price", false, "PRICE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property PlatformNum = new Property(6, Integer.class, "platformNum", false, "PLATFORM_NUM");
        public final static Property MerchantId = new Property(7, String.class, "merchantId", false, "MERCHANT_ID");
    };

    private DaoSession daoSession;

    private Query<TodayOrder> merchant_TodayDishesQuery;

    public TodayOrderDao(DaoConfig config) {
        super(config);
    }
    
    public TodayOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TODAY_ORDER' (" + //
                "'ORDER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: orderId
                "'PLATFORM' INTEGER," + // 1: platform
                "'IS_PAID' INTEGER," + // 2: isPaid
                "'PHONE' TEXT," + // 3: phone
                "'PRICE' REAL," + // 4: price
                "'TIME' TEXT," + // 5: time
                "'PLATFORM_NUM' INTEGER," + // 6: platformNum
                "'MERCHANT_ID' TEXT NOT NULL );"); // 7: merchantId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TODAY_ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TodayOrder entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getOrderId());
 
        Integer platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindLong(2, platform);
        }
 
        Boolean isPaid = entity.getIsPaid();
        if (isPaid != null) {
            stmt.bindLong(3, isPaid ? 1l: 0l);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(5, price);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        Integer platformNum = entity.getPlatformNum();
        if (platformNum != null) {
            stmt.bindLong(7, platformNum);
        }
        stmt.bindString(8, entity.getMerchantId());
    }

    @Override
    protected void attachEntity(TodayOrder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TodayOrder readEntity(Cursor cursor, int offset) {
        TodayOrder entity = new TodayOrder( //
            cursor.getString(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // platform
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isPaid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // platformNum
            cursor.getString(offset + 7) // merchantId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TodayOrder entity, int offset) {
        entity.setOrderId(cursor.getString(offset + 0));
        entity.setPlatform(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsPaid(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlatformNum(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMerchantId(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TodayOrder entity, long rowId) {
        return entity.getOrderId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TodayOrder entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "todayDishes" to-many relationship of Merchant. */
    public List<TodayOrder> _queryMerchant_TodayDishes(String merchantId) {
        synchronized (this) {
            if (merchant_TodayDishesQuery == null) {
                QueryBuilder<TodayOrder> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MerchantId.eq(null));
                merchant_TodayDishesQuery = queryBuilder.build();
            }
        }
        Query<TodayOrder> query = merchant_TodayDishesQuery.forCurrentThread();
        query.setParameter(0, merchantId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMerchantDao().getAllColumns());
            builder.append(" FROM TODAY_ORDER T");
            builder.append(" LEFT JOIN MERCHANT T0 ON T.'MERCHANT_ID'=T0.'MERCHANT_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TodayOrder loadCurrentDeep(Cursor cursor, boolean lock) {
        TodayOrder entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Merchant merchant = loadCurrentOther(daoSession.getMerchantDao(), cursor, offset);
         if(merchant != null) {
            entity.setMerchant(merchant);
        }

        return entity;    
    }

    public TodayOrder loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TodayOrder> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TodayOrder> list = new ArrayList<TodayOrder>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TodayOrder> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TodayOrder> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
