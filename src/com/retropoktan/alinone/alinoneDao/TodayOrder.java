package com.retropoktan.alinone.alinoneDao;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TODAY_ORDER.
 */
public class TodayOrder {

    /** Not-null value. */
    private String orderId;
    private Integer platform;
    private Boolean isPaid;
    private String phone;
    private Float price;
    private String time;
    private Integer platformNum;
    /** Not-null value. */
    private String merchantId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TodayOrderDao myDao;

    private Merchant merchant;
    private String merchant__resolvedKey;


    public TodayOrder() {
    }

    public TodayOrder(String orderId) {
        this.orderId = orderId;
    }
    
    public String getPlatFormName() {
    	switch (platform) {
		case 1:
			return "淘点点";
		case 2:
			return "饿了么";
		case 3:
			return "美团外卖";
		case 10:
			return "电话订单";
		case 11:
			return "其他平台";
		default:
			return "未知";
		}
    }

    public TodayOrder(String orderId, Integer platform, Boolean isPaid, String phone, Float price, String time, Integer platformNum, String merchantId) {
        this.orderId = orderId;
        this.platform = platform;
        this.isPaid = isPaid;
        this.phone = phone;
        this.price = price;
        this.time = time;
        this.platformNum = platformNum;
        this.merchantId = merchantId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTodayOrderDao() : null;
    }

    /** Not-null value. */
    public String getOrderId() {
        return orderId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public Integer getPlatform() {
        return platform;
    }

    public void setPlatform(Integer platform) {
        this.platform = platform;
    }

    public Boolean getIsPaid() {
        return isPaid;
    }

    public void setIsPaid(Boolean isPaid) {
        this.isPaid = isPaid;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public Float getPrice() {
        return price;
    }

    public void setPrice(Float price) {
        this.price = price;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    public Integer getPlatformNum() {
        return platformNum;
    }

    public void setPlatformNum(Integer platformNum) {
        this.platformNum = platformNum;
    }

    /** Not-null value. */
    public String getMerchantId() {
        return merchantId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMerchantId(String merchantId) {
        this.merchantId = merchantId;
    }

    /** To-one relationship, resolved on first access. */
    public Merchant getMerchant() {
        String __key = this.merchantId;
        if (merchant__resolvedKey == null || merchant__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MerchantDao targetDao = daoSession.getMerchantDao();
            Merchant merchantNew = targetDao.load(__key);
            synchronized (this) {
                merchant = merchantNew;
            	merchant__resolvedKey = __key;
            }
        }
        return merchant;
    }

    public void setMerchant(Merchant merchant) {
        if (merchant == null) {
            throw new DaoException("To-one property 'merchantId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.merchant = merchant;
            merchantId = merchant.getMerchantID();
            merchant__resolvedKey = merchantId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
