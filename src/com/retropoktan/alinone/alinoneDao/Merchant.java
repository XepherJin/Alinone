package com.retropoktan.alinone.alinoneDao;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MERCHANT.
 */
public class Merchant {

    /** Not-null value. */
    private String merchantID;
    /** Not-null value. */
    private String merchantName;
    private int orderNum;
    private int preOrderNum;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MerchantDao myDao;

    private List<TodayOrder> todayDishes;

    public Merchant() {
    }

    public Merchant(String merchantID) {
        this.merchantID = merchantID;
    }

    public Merchant(String merchantID, String merchantName, int orderNum, int preOrderNum) {
        this.merchantID = merchantID;
        this.merchantName = merchantName;
        this.orderNum = orderNum;
        this.preOrderNum = preOrderNum;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMerchantDao() : null;
    }

    /** Not-null value. */
    public String getMerchantID() {
        return merchantID;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMerchantID(String merchantID) {
        this.merchantID = merchantID;
    }

    /** Not-null value. */
    public String getMerchantName() {
        return merchantName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMerchantName(String merchantName) {
        this.merchantName = merchantName;
    }

    public int getOrderNum() {
        return orderNum;
    }

    public void setOrderNum(int orderNum) {
        this.orderNum = orderNum;
    }

    public int getPreOrderNum() {
        return preOrderNum;
    }

    public void setPreOrderNum(int preOrderNum) {
        this.preOrderNum = preOrderNum;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TodayOrder> getTodayDishes() {
        if (todayDishes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TodayOrderDao targetDao = daoSession.getTodayOrderDao();
            List<TodayOrder> todayDishesNew = targetDao._queryMerchant_TodayDishes(merchantID);
            synchronized (this) {
                if(todayDishes == null) {
                    todayDishes = todayDishesNew;
                }
            }
        }
        return todayDishes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTodayDishes() {
        todayDishes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
