package com.retropoktan.alinone.alinoneDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MERCHANT.
*/
public class MerchantDao extends AbstractDao<Merchant, String> {

    public static final String TABLENAME = "MERCHANT";

    /**
     * Properties of entity Merchant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MerchantID = new Property(0, String.class, "merchantID", true, "MERCHANT_ID");
        public final static Property MerchantName = new Property(1, String.class, "merchantName", false, "MERCHANT_NAME");
        public final static Property OrderNum = new Property(2, int.class, "orderNum", false, "ORDER_NUM");
        public final static Property PreOrderNum = new Property(3, int.class, "preOrderNum", false, "PRE_ORDER_NUM");
    };

    private DaoSession daoSession;


    public MerchantDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MERCHANT' (" + //
                "'MERCHANT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: merchantID
                "'MERCHANT_NAME' TEXT NOT NULL ," + // 1: merchantName
                "'ORDER_NUM' INTEGER NOT NULL ," + // 2: orderNum
                "'PRE_ORDER_NUM' INTEGER NOT NULL );"); // 3: preOrderNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MERCHANT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Merchant entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMerchantID());
        stmt.bindString(2, entity.getMerchantName());
        stmt.bindLong(3, entity.getOrderNum());
        stmt.bindLong(4, entity.getPreOrderNum());
    }

    @Override
    protected void attachEntity(Merchant entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Merchant readEntity(Cursor cursor, int offset) {
        Merchant entity = new Merchant( //
            cursor.getString(offset + 0), // merchantID
            cursor.getString(offset + 1), // merchantName
            cursor.getInt(offset + 2), // orderNum
            cursor.getInt(offset + 3) // preOrderNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Merchant entity, int offset) {
        entity.setMerchantID(cursor.getString(offset + 0));
        entity.setMerchantName(cursor.getString(offset + 1));
        entity.setOrderNum(cursor.getInt(offset + 2));
        entity.setPreOrderNum(cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Merchant entity, long rowId) {
        return entity.getMerchantID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Merchant entity) {
        if(entity != null) {
            return entity.getMerchantID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
