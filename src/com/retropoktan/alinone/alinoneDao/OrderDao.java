package com.retropoktan.alinone.alinoneDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER.
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderID = new Property(1, String.class, "orderID", false, "ORDER_ID");
        public final static Property ObjectPhone = new Property(2, String.class, "objectPhone", false, "OBJECT_PHONE");
        public final static Property OrderAddress = new Property(3, String.class, "orderAddress", false, "ORDER_ADDRESS");
        public final static Property MerchantID = new Property(4, String.class, "merchantID", false, "MERCHANT_ID");
        public final static Property OrderTime = new Property(5, java.util.Date.class, "orderTime", false, "ORDER_TIME");
    };


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ORDER_ID' TEXT NOT NULL ," + // 1: orderID
                "'OBJECT_PHONE' TEXT NOT NULL ," + // 2: objectPhone
                "'ORDER_ADDRESS' TEXT NOT NULL ," + // 3: orderAddress
                "'MERCHANT_ID' TEXT NOT NULL ," + // 4: merchantID
                "'ORDER_TIME' INTEGER NOT NULL );"); // 5: orderTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderID());
        stmt.bindString(3, entity.getObjectPhone());
        stmt.bindString(4, entity.getOrderAddress());
        stmt.bindString(5, entity.getMerchantID());
        stmt.bindLong(6, entity.getOrderTime().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // orderID
            cursor.getString(offset + 2), // objectPhone
            cursor.getString(offset + 3), // orderAddress
            cursor.getString(offset + 4), // merchantID
            new java.util.Date(cursor.getLong(offset + 5)) // orderTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderID(cursor.getString(offset + 1));
        entity.setObjectPhone(cursor.getString(offset + 2));
        entity.setOrderAddress(cursor.getString(offset + 3));
        entity.setMerchantID(cursor.getString(offset + 4));
        entity.setOrderTime(new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
