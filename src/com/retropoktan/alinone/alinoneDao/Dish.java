package com.retropoktan.alinone.alinoneDao;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DISH.
 */
public class Dish {

    /** Not-null value. */
    private String dishName;
    private int dishNum;
    private float dishCost;
    /** Not-null value. */
    private String orderId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DishDao myDao;

    private AlinoneOrder alinoneOrder;
    private String alinoneOrder__resolvedKey;


    public Dish() {
    }

    public Dish(String dishName, int dishNum, float dishCost, String orderId) {
        this.dishName = dishName;
        this.dishNum = dishNum;
        this.dishCost = dishCost;
        this.orderId = orderId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDishDao() : null;
    }

    /** Not-null value. */
    public String getDishName() {
        return dishName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDishName(String dishName) {
        this.dishName = dishName;
    }

    public int getDishNum() {
        return dishNum;
    }

    public void setDishNum(int dishNum) {
        this.dishNum = dishNum;
    }

    public float getDishCost() {
        return dishCost;
    }

    public void setDishCost(float dishCost) {
        this.dishCost = dishCost;
    }

    /** Not-null value. */
    public String getOrderId() {
        return orderId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    /** To-one relationship, resolved on first access. */
    public AlinoneOrder getAlinoneOrder() {
        String __key = this.orderId;
        if (alinoneOrder__resolvedKey == null || alinoneOrder__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AlinoneOrderDao targetDao = daoSession.getAlinoneOrderDao();
            AlinoneOrder alinoneOrderNew = targetDao.load(__key);
            synchronized (this) {
                alinoneOrder = alinoneOrderNew;
            	alinoneOrder__resolvedKey = __key;
            }
        }
        return alinoneOrder;
    }

    public void setAlinoneOrder(AlinoneOrder alinoneOrder) {
        if (alinoneOrder == null) {
            throw new DaoException("To-one property 'orderId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.alinoneOrder = alinoneOrder;
            orderId = alinoneOrder.getOrderID();
            alinoneOrder__resolvedKey = orderId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
