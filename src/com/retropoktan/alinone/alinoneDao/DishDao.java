package com.retropoktan.alinone.alinoneDao;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DISH.
*/
public class DishDao extends AbstractDao<Dish, Void> {

    public static final String TABLENAME = "DISH";

    /**
     * Properties of entity Dish.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DishName = new Property(0, String.class, "dishName", false, "DISH_NAME");
        public final static Property DishNum = new Property(1, int.class, "dishNum", false, "DISH_NUM");
        public final static Property DishCost = new Property(2, float.class, "dishCost", false, "DISH_COST");
        public final static Property OrderId = new Property(3, String.class, "orderId", false, "ORDER_ID");
    };

    private DaoSession daoSession;

    private Query<Dish> alinoneOrder_DishesQuery;

    public DishDao(DaoConfig config) {
        super(config);
    }
    
    public DishDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DISH' (" + //
                "'DISH_NAME' TEXT NOT NULL ," + // 0: dishName
                "'DISH_NUM' INTEGER NOT NULL ," + // 1: dishNum
                "'DISH_COST' REAL NOT NULL ," + // 2: dishCost
                "'ORDER_ID' TEXT NOT NULL );"); // 3: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DISH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Dish entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getDishName());
        stmt.bindLong(2, entity.getDishNum());
        stmt.bindDouble(3, entity.getDishCost());
        stmt.bindString(4, entity.getOrderId());
    }

    @Override
    protected void attachEntity(Dish entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Dish readEntity(Cursor cursor, int offset) {
        Dish entity = new Dish( //
            cursor.getString(offset + 0), // dishName
            cursor.getInt(offset + 1), // dishNum
            cursor.getFloat(offset + 2), // dishCost
            cursor.getString(offset + 3) // orderId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dish entity, int offset) {
        entity.setDishName(cursor.getString(offset + 0));
        entity.setDishNum(cursor.getInt(offset + 1));
        entity.setDishCost(cursor.getFloat(offset + 2));
        entity.setOrderId(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Dish entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Dish entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dishes" to-many relationship of AlinoneOrder. */
    public List<Dish> _queryAlinoneOrder_Dishes(String orderId) {
        synchronized (this) {
            if (alinoneOrder_DishesQuery == null) {
                QueryBuilder<Dish> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderId.eq(null));
                alinoneOrder_DishesQuery = queryBuilder.build();
            }
        }
        Query<Dish> query = alinoneOrder_DishesQuery.forCurrentThread();
        query.setParameter(0, orderId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAlinoneOrderDao().getAllColumns());
            builder.append(" FROM DISH T");
            builder.append(" LEFT JOIN ALINONE_ORDER T0 ON T.'ORDER_ID'=T0.'ORDER_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Dish loadCurrentDeep(Cursor cursor, boolean lock) {
        Dish entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        AlinoneOrder alinoneOrder = loadCurrentOther(daoSession.getAlinoneOrderDao(), cursor, offset);
         if(alinoneOrder != null) {
            entity.setAlinoneOrder(alinoneOrder);
        }

        return entity;    
    }

    public Dish loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Dish> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Dish> list = new ArrayList<Dish>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Dish> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Dish> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
