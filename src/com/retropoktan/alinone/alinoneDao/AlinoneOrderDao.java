package com.retropoktan.alinone.alinoneDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALINONE_ORDER.
*/
public class AlinoneOrderDao extends AbstractDao<AlinoneOrder, String> {

    public static final String TABLENAME = "ALINONE_ORDER";

    /**
     * Properties of entity AlinoneOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderID = new Property(0, String.class, "orderID", true, "ORDER_ID");
        public final static Property ObjectPhone = new Property(1, String.class, "objectPhone", false, "OBJECT_PHONE");
        public final static Property OrderAddress = new Property(2, String.class, "orderAddress", false, "ORDER_ADDRESS");
        public final static Property MerchantID = new Property(3, String.class, "merchantID", false, "MERCHANT_ID");
        public final static Property OrderTime = new Property(4, java.util.Date.class, "orderTime", false, "ORDER_TIME");
    };


    public AlinoneOrderDao(DaoConfig config) {
        super(config);
    }
    
    public AlinoneOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALINONE_ORDER' (" + //
                "'ORDER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: orderID
                "'OBJECT_PHONE' TEXT NOT NULL ," + // 1: objectPhone
                "'ORDER_ADDRESS' TEXT NOT NULL ," + // 2: orderAddress
                "'MERCHANT_ID' TEXT NOT NULL ," + // 3: merchantID
                "'ORDER_TIME' INTEGER NOT NULL );"); // 4: orderTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALINONE_ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlinoneOrder entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getOrderID());
        stmt.bindString(2, entity.getObjectPhone());
        stmt.bindString(3, entity.getOrderAddress());
        stmt.bindString(4, entity.getMerchantID());
        stmt.bindLong(5, entity.getOrderTime().getTime());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlinoneOrder readEntity(Cursor cursor, int offset) {
        AlinoneOrder entity = new AlinoneOrder( //
            cursor.getString(offset + 0), // orderID
            cursor.getString(offset + 1), // objectPhone
            cursor.getString(offset + 2), // orderAddress
            cursor.getString(offset + 3), // merchantID
            new java.util.Date(cursor.getLong(offset + 4)) // orderTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlinoneOrder entity, int offset) {
        entity.setOrderID(cursor.getString(offset + 0));
        entity.setObjectPhone(cursor.getString(offset + 1));
        entity.setOrderAddress(cursor.getString(offset + 2));
        entity.setMerchantID(cursor.getString(offset + 3));
        entity.setOrderTime(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AlinoneOrder entity, long rowId) {
        return entity.getOrderID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AlinoneOrder entity) {
        if(entity != null) {
            return entity.getOrderID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
